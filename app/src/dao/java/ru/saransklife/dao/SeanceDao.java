package ru.saransklife.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import ru.saransklife.dao.Seance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SEANCE.
*/
public class SeanceDao extends AbstractDao<Seance, Long> {

    public static final String TABLENAME = "SEANCE";

    /**
     * Properties of entity Seance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Datetime = new Property(1, java.util.Date.class, "datetime", false, "DATETIME");
        public final static Property HallName = new Property(2, String.class, "hallName", false, "HALL_NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Price = new Property(4, Integer.class, "price", false, "PRICE");
        public final static Property PlaceId = new Property(5, Long.class, "placeId", false, "PLACE_ID");
        public final static Property Event_id = new Property(6, long.class, "event_id", false, "EVENT_ID");
    };

    private DaoSession daoSession;

    private Query<Seance> event_SeancesQuery;

    public SeanceDao(DaoConfig config) {
        super(config);
    }
    
    public SeanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SEANCE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATETIME' INTEGER," + // 1: datetime
                "'HALL_NAME' TEXT," + // 2: hallName
                "'TYPE' TEXT," + // 3: type
                "'PRICE' INTEGER," + // 4: price
                "'PLACE_ID' INTEGER," + // 5: placeId
                "'EVENT_ID' INTEGER NOT NULL );"); // 6: event_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEANCE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Seance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindLong(2, datetime.getTime());
        }
 
        String hallName = entity.getHallName();
        if (hallName != null) {
            stmt.bindString(3, hallName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(5, price);
        }
 
        Long placeId = entity.getPlaceId();
        if (placeId != null) {
            stmt.bindLong(6, placeId);
        }
        stmt.bindLong(7, entity.getEvent_id());
    }

    @Override
    protected void attachEntity(Seance entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Seance readEntity(Cursor cursor, int offset) {
        Seance entity = new Seance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // datetime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hallName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // placeId
            cursor.getLong(offset + 6) // event_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Seance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDatetime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setHallName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPlaceId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setEvent_id(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Seance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Seance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "seances" to-many relationship of Event. */
    public List<Seance> _queryEvent_Seances(long event_id) {
        synchronized (this) {
            if (event_SeancesQuery == null) {
                QueryBuilder<Seance> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Event_id.eq(null));
                event_SeancesQuery = queryBuilder.build();
            }
        }
        Query<Seance> query = event_SeancesQuery.forCurrentThread();
        query.setParameter(0, event_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPlaceEntityDao().getAllColumns());
            builder.append(" FROM SEANCE T");
            builder.append(" LEFT JOIN PLACE_ENTITY T0 ON T.'PLACE_ID'=T0.'LOCAL_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Seance loadCurrentDeep(Cursor cursor, boolean lock) {
        Seance entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PlaceEntity placeEntity = loadCurrentOther(daoSession.getPlaceEntityDao(), cursor, offset);
        entity.setPlaceEntity(placeEntity);

        return entity;    
    }

    public Seance loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Seance> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Seance> list = new ArrayList<Seance>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Seance> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Seance> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
