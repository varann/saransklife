package ru.saransklife.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ru.saransklife.dao.EventParams;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT_PARAMS.
*/
public class EventParamsDao extends AbstractDao<EventParams, Long> {

    public static final String TABLENAME = "EVENT_PARAMS";

    /**
     * Properties of entity EventParams.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property English_name = new Property(1, String.class, "english_name", false, "ENGLISH_NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Country = new Property(3, String.class, "country", false, "COUNTRY");
        public final static Property Year = new Property(4, String.class, "year", false, "YEAR");
        public final static Property Genre = new Property(5, String.class, "genre", false, "GENRE");
        public final static Property Duration = new Property(6, String.class, "duration", false, "DURATION");
        public final static Property Start_age = new Property(7, String.class, "start_age", false, "START_AGE");
        public final static Property Director = new Property(8, String.class, "director", false, "DIRECTOR");
        public final static Property Actors = new Property(9, String.class, "actors", false, "ACTORS");
        public final static Property Afisha = new Property(10, String.class, "afisha", false, "AFISHA");
        public final static Property Json_images = new Property(11, String.class, "json_images", false, "JSON_IMAGES");
    };


    public EventParamsDao(DaoConfig config) {
        super(config);
    }
    
    public EventParamsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENT_PARAMS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ENGLISH_NAME' TEXT," + // 1: english_name
                "'DESCRIPTION' TEXT," + // 2: description
                "'COUNTRY' TEXT," + // 3: country
                "'YEAR' TEXT," + // 4: year
                "'GENRE' TEXT," + // 5: genre
                "'DURATION' TEXT," + // 6: duration
                "'START_AGE' TEXT," + // 7: start_age
                "'DIRECTOR' TEXT," + // 8: director
                "'ACTORS' TEXT," + // 9: actors
                "'AFISHA' TEXT," + // 10: afisha
                "'JSON_IMAGES' TEXT);"); // 11: json_images
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT_PARAMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EventParams entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String english_name = entity.getEnglish_name();
        if (english_name != null) {
            stmt.bindString(2, english_name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(4, country);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String genre = entity.getGenre();
        if (genre != null) {
            stmt.bindString(6, genre);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(7, duration);
        }
 
        String start_age = entity.getStart_age();
        if (start_age != null) {
            stmt.bindString(8, start_age);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(9, director);
        }
 
        String actors = entity.getActors();
        if (actors != null) {
            stmt.bindString(10, actors);
        }
 
        String afisha = entity.getAfisha();
        if (afisha != null) {
            stmt.bindString(11, afisha);
        }
 
        String json_images = entity.getJson_images();
        if (json_images != null) {
            stmt.bindString(12, json_images);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EventParams readEntity(Cursor cursor, int offset) {
        EventParams entity = new EventParams( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // english_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // country
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // year
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // genre
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // start_age
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // director
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // actors
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // afisha
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // json_images
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EventParams entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEnglish_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountry(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYear(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGenre(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStart_age(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDirector(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setActors(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAfisha(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setJson_images(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EventParams entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EventParams entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
