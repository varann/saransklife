package ru.saransklife.dao;

import ru.saransklife.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table REFERENCE.
 */
public class Reference {

    private Long id;
    private String name;
    private String description;
    private String phone;
    private String information;
    private String address;
    private String site;
    private Long category_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ReferenceDao myDao;

    private ReferenceCategory referenceCategory;
    private Long referenceCategory__resolvedKey;


    public Reference() {
    }

    public Reference(Long id) {
        this.id = id;
    }

    public Reference(Long id, String name, String description, String phone, String information, String address, String site, Long category_id) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.phone = phone;
        this.information = information;
        this.address = address;
        this.site = site;
        this.category_id = category_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReferenceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getInformation() {
        return information;
    }

    public void setInformation(String information) {
        this.information = information;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getSite() {
        return site;
    }

    public void setSite(String site) {
        this.site = site;
    }

    public Long getCategory_id() {
        return category_id;
    }

    public void setCategory_id(Long category_id) {
        this.category_id = category_id;
    }

    /** To-one relationship, resolved on first access. */
    public ReferenceCategory getReferenceCategory() {
        Long __key = this.category_id;
        if (referenceCategory__resolvedKey == null || !referenceCategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReferenceCategoryDao targetDao = daoSession.getReferenceCategoryDao();
            ReferenceCategory referenceCategoryNew = targetDao.load(__key);
            synchronized (this) {
                referenceCategory = referenceCategoryNew;
            	referenceCategory__resolvedKey = __key;
            }
        }
        return referenceCategory;
    }

    public void setReferenceCategory(ReferenceCategory referenceCategory) {
        synchronized (this) {
            this.referenceCategory = referenceCategory;
            category_id = referenceCategory == null ? null : referenceCategory.getId();
            referenceCategory__resolvedKey = category_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
