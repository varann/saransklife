package ru.saransklife.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import ru.saransklife.dao.MenuItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MENU_ITEM.
*/
public class MenuItemDao extends AbstractDao<MenuItem, Long> {

    public static final String TABLENAME = "MENU_ITEM";

    /**
     * Properties of entity MenuItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Slug = new Property(2, String.class, "slug", false, "SLUG");
        public final static Property Module = new Property(3, String.class, "module", false, "MODULE");
        public final static Property ParentId = new Property(4, Long.class, "parentId", false, "PARENT_ID");
    };

    private DaoSession daoSession;

    private Query<MenuItem> menuItem_ChildrenQuery;

    public MenuItemDao(DaoConfig config) {
        super(config);
    }
    
    public MenuItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MENU_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'SLUG' TEXT," + // 2: slug
                "'MODULE' TEXT," + // 3: module
                "'PARENT_ID' INTEGER);"); // 4: parentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MENU_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MenuItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(3, slug);
        }
 
        String module = entity.getModule();
        if (module != null) {
            stmt.bindString(4, module);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(5, parentId);
        }
    }

    @Override
    protected void attachEntity(MenuItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MenuItem readEntity(Cursor cursor, int offset) {
        MenuItem entity = new MenuItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // slug
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // module
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // parentId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MenuItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSlug(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModule(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParentId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MenuItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MenuItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "children" to-many relationship of MenuItem. */
    public List<MenuItem> _queryMenuItem_Children(Long parentId) {
        synchronized (this) {
            if (menuItem_ChildrenQuery == null) {
                QueryBuilder<MenuItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                menuItem_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<MenuItem> query = menuItem_ChildrenQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

}
